---
layout: post
title: Lecture 1 - Introduction and Consistent Hashing
---

## Consistent Hashing ##

### Meta-Discussion ###

We'll talk about the course in general in Section~\ref{s:about}, but
first let's discuss a representative technical topic: {\em consistent
  hashing}.  This topic is representative in the following respects:

* As you could guess by the word ``hashing,'' the topic builds on
  central algorithmic ideas that you've already learned (e.g., in
  CS161) and
  adapts them to some very real-world applications.

* The topic is ``modern,'' in the sense that it is motivated by
  issues in present-day systems that were not present in the applications
  of yore --- consistent hashing is not in your parents' algorithms
  textbook, because   back then it wasn't needed.  The original idea
  isn't that new anymore (from 1997), but it has been repurposed for
  new technologies several times since.

* Consistent hashing is a ``tool'' in the sense that it is a
  non-obvious idea but, once you know it, it's general and flexible
  enough to potentially prove useful for other problems.
In this course, we'll be looking for the following trifecta:
(i) ideas that are
  *non-obvious*, even to the well-trained computer scientist, so
  that we're not wasting your time; (ii) *conceptually simple*
  --- realistically, these are the only ideas that you might remember
  a year or more from now, when you're a start-up founder, senior
  software engineer, or PhD student (iii) *fundamental*,
  meaning that there is some chance that the idea will prove useful to you in
  the future.

* The idea has real applications.  Consistent hashing gave
  birth to Akamai, which to this day is a major player in the Internet
  (market cap $$\approx$$ \$10B), managing the Web presence of tons of
  major companies.  More recently, consistent hashing has been
  repurposed to solve basic problems in peer-to-peer networks
  (initially in~\cite{chord}),
  including parts of BitTorrent.  These days, all the cool kids are
  using consistent hashing for distributed storage --- made popular by
  Amazon's Dynamo~\cite{amazon}, the idea is to have a lightweight
  alternative to a database where all the data resides in main memory
  across multiple machines,  rather than on disk.

### Web Caching ###

This is *italic*

This is an equation:
$$x_{1,2}=\frac{3}{b}$$

This is **bold**

This is `code`

> This is blockquoted

```
Code in a block.
```

[This is Google](http://www.google.com)

* This is a list.
* Another item.

1. This is another list.
2. Yay
3. Yay3
    * This is inside

A CNN consists of a number of convolutional and subsampling layers optionally followed by fully connected layers.  The input to a convolutional layer is a $$m \text{ x } m \text{ x } r$$ image where $$m$$ is the height and width of the image and $$r$$ is the number of channels, e.g. an RGB image has $$r=3$$.
